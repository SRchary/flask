import traceback

import pandas as pd
import numpy as np
from pandas import ExcelWriter
import conf
import os
import shutil
import openpyxl

try:
    from ferc import formatter
except:
    from ferc import formatter

STRUC_TYPES = {
    "LAMINATED WOOD POLE": "SWP",
    "LATTICE STEEL POLE": "SSP",
    "LATTICE STEEL TOWER": "T",
    "LIGHT DUTY STEEL POLE": "SSP",
    "SINGLE WOOD POLE": "SWP",
    "TUBULAR STEEL": "SSP",
    "LDSP": "SSP",
    "TSP": "SSP"
}

EXCEL_HEADERS_NAMES = ["SAP_FUNC_LOC_NO", "TLINE_NO", "AUTOGENERATED_NO", "TLINE_NM", " ", "RATEDKV",
                       "NOMINAL_VOLTAGE", "STRUC_TYPE", "CIRCUIT_MI", " ", "NUMBER_CIR", "CONDUCTOR_SEGMENT",
                       "FOOTNOTES"]

EXCEL_HEADERS_VALUES = ["SAP_FUNC_LOC", "TLINE_NO", "AUTOGENERATED_NO", "TLINE_NM", " ", "RATEDKV",
                        "NOMINAL_VOLTAGE", "STRUC_TYPE", "CIRCUIT_MI", " ", "NUMBER_CIR", "CONDUCTOR_SEGMENT",
                        "FOOTNOTES"]


def footnotes(x):
    conductor_segment = x["CONDUCTOR_SEGMENT"]
    # if x['SAP_FUNC_LOC_NO'] == "ETL.4970":
    #     print(x)
    foot_note_str = ""
    if type(conductor_segment) == str and conductor_segment:
        conductor_segments = conductor_segment.split()
        count = len(conductor_segments)
        if "ALUM" in conductor_segments:
            foot_note_str = "a"
        if "BUNDLE" in conductor_segments:
            foot_note_str = foot_note_str + ", b" if foot_note_str else "b"
    if "STATUS" in x and x["STATUS"] == "IDL":
        foot_note_str = foot_note_str + ", i" if foot_note_str else "i"
    return foot_note_str


def ug_footnotes(x):
    conductor_segment = x["CONDUCTOR_SEGMENT"]
    foot_note_str = ""
    if type(conductor_segment) == str and conductor_segment:
        conductor_segments = conductor_segment.split()
        count = len(conductor_segments)
        if "ALUM" in conductor_segments:
            foot_note_str = "a"
        if "BUNDLE" in conductor_segments:
            foot_note_str = foot_note_str + ", b" if foot_note_str else "b"
    if "STATUS" in x and x["STATUS"] == "IDL":
        foot_note_str = foot_note_str + ", i" if foot_note_str else "i"
    return foot_note_str


def get_oh_conductor_dataset(mongo, end_year):
    results = mongo.db.ferc_data.find({"YEAR": end_year}, {"_id": 0})
    results = pd.DataFrame(list(results))
    if results.empty:
        return results
    results["AUTOGENERATED_NO"] = ""
    results["NUMBER_CIR"] = "1"
    results[" "] = ""
    results[" "] = ""
    results["STRUC_TYPE"] = results["STRUC_TYPE"].fillna("")
    results["FOOTNOTES"] = results.apply(footnotes, axis=1)
    results = results[EXCEL_HEADERS_NAMES]
    results.rename(columns={"SAP_FUNC_LOC_NO": 'SAP_FUNC_LOC', "CONDUCTOR_SEGMENT": 'CONDUCTOR SEGMENT'}, inplace=True)
    return results


def get_oh_kw_dataset(mongo, end_year):
    # db.getCollection('ferc_data').
    # aggregate([
    # {$group: {_id: "$RATEDKV", 'count': {"$sum": 1}, }}])
    results = mongo.db.ferc_data.aggregate([
        {"$match": {'YEAR': end_year}},
        {"$group": {"_id": "$RATEDKV", 'FREQUENCY': {"$sum": 1}, 'SUM_Mi': {"$sum": "$CIRCUIT_MI"}}}
    ])
    results = pd.DataFrame(list(results))
    if results.empty:
        return results
    results.rename(columns={"_id": 'RATEDKV'}, inplace=True)
    results["RATEDKV"] = results["RATEDKV"].apply(lambda x: x if x else "60")
    results["RATEDKV"] = results["RATEDKV"].astype(int)
    results = results.groupby('RATEDKV').sum().reset_index()
    results = results.sort_values(["RATEDKV"], ascending=False)
    results = results[["RATEDKV", "FREQUENCY", "SUM_Mi"]]
    print(results)
    return results


def get_ug_conductor_dataset(mongo, end_year):
    results = mongo.db.ferc_ug_data.find({"YEAR": end_year}, {"_id": 0})
    results = pd.DataFrame(list(results))
    if results.empty:
        return results
    results["AUTOGENERATED_NO"] = ""
    results["NUMBER_CIR"] = "1"
    results[" "] = ""
    results["FOOTNOTES"] = results.apply(ug_footnotes, axis=1)
    results = results[EXCEL_HEADERS_NAMES]
    results.rename(columns={"SAP_FUNC_LOC_NO": 'SAP_FUNC_LOC', "CONDUCTOR_SEGMENT": 'CONDUCTOR SEGMENT'}, inplace=True)
    results.drop_duplicates(inplace=True)
    return results


def get_ug_kw_dataset(mongo, end_year):
    # db.getCollection('ferc_data').
    # aggregate([
    # {$group: {_id: "$RATEDKV", 'count': {"$sum": 1}, }}])
    results = mongo.db.ferc_ug_data.aggregate([
        {"$match": {'YEAR': end_year}},
        {"$group": {"_id": "$RATEDKV", 'FREQUENCY': {"$sum": 1}, 'SUM_Mi': {"$sum": "$CIRCUIT_MI"}}}
    ])
    results = pd.DataFrame(list(results))
    if results.empty:
        return results
    results.rename(columns={"_id": 'RATEDKV'}, inplace=True)
    results["RATEDKV"] = results["RATEDKV"].apply(lambda x: x if x else "60")
    results["RATEDKV"] = results["RATEDKV"].astype(int)
    results = results.groupby('RATEDKV').sum().reset_index()
    results = results.sort_values(["RATEDKV"], ascending=False)
    results = results[["RATEDKV", "FREQUENCY", "SUM_Mi"]]
    return results


def generate_ferc_excel(mongo, start_date, end_date, dataframes):
    sheet_name = conf.FERC_FILE_NAME
    #ext = datetime.strftime(datetime.now(), "%H%M%S")
    sheet_name = "{}_{}.xlsx".format(sheet_name, end_date.year)

    file_path = os.path.join(conf.GRC_FILE_DIRS[0], sheet_name)
    writer = ExcelWriter(file_path, engine='xlsxwriter', options={'strings_to_numbers': True})
    workbook = writer.book
    oh_conductor_df = dataframes.get("oh_conductor_df")
    ug_conductor_df = dataframes.get("ug_conductor_df")

    oh_kw_df = dataframes.get("oh_kw_df")
    ug_kw_df = dataframes.get("ug_kw_df")

    oh_conductor_df.to_excel(writer, "OH", startrow=0, startcol=0, index=False)

    if not oh_conductor_df.empty:
        formatter.format_oh_conductor_sheet(workbook, writer.sheets['OH'], oh_conductor_df)

    oh_kw_df.to_excel(writer, "OH_KW", startrow=0, startcol=0, index=False)
    if not oh_kw_df.empty:
        formatter.format_oh_kw_sheet(workbook, writer.sheets['OH_KW'], oh_kw_df)

    ug_conductor_df.to_excel(writer, "UG", startrow=0, startcol=0, index=False)

    if not ug_conductor_df.empty:
        formatter.format_ug_conductor_sheet(workbook, writer.sheets['UG'], ug_conductor_df)

    ug_kw_df.to_excel(writer, "UG_KW", startrow=0, startcol=0, index=False)
    if not ug_kw_df.empty:
        formatter.format_oh_kw_sheet(workbook, writer.sheets['UG_KW'], ug_kw_df)
    writer.save()
    for ffname in conf.GRC_FILE_DIRS[1:]:
        dest_path = os.path.join(ffname, sheet_name)
        shutil.copy(file_path, dest_path)
    return sheet_name


def set_designation(row):
    tline_nm = row["TLINE_NM"].strip()
    if tline_nm:
        if tline_nm.endswith("TAP"):
            row["TLINE_NM"] = tline_nm
            row["DESIGNATION_B"] = ""
        else:
            try:
                row["TLINE_NM"] = tline_nm.split("-")[0].strip()
                row["DESIGNATION_B"] = "-".join(tline_nm.split("-")[1:]).strip()
            except:
                row["DESIGNATION_B"] = ""
    else:
        row["DESIGNATION_B"] = ""
    return row


def generate_ferc_intr_excel(mongo, start_date, end_date, dataframes):

    source_file = conf.FERC_TEMPLATE_FILE
    book = openpyxl.load_workbook(source_file)

    start_row_index = 23
    sheet_name = conf.FERC_INTR_FILE_NAME
    sheet_name = "{}_{}.xlsx".format(sheet_name, end_date.year)
    file_path = os.path.join(conf.GRC_FILE_DIRS[0], sheet_name)
    writer = ExcelWriter(file_path, engine='openpyxl', options={'strings_to_numbers': True})
    writer.book = book
    writer.sheets = dict((ws.title, ws) for ws in book.worksheets)

    oh_conductor_df = dataframes.get("oh_conductor_df")
    ug_conductor_df = dataframes.get("ug_conductor_df")

    oh_kw_df = dataframes.get("oh_kw_df")
    ug_kw_df = dataframes.get("ug_kw_df")

    conductor_df_columns = ["", "TLINE_NM", "DESIGNATION_B", "RATEDKV", "NOMINAL_VOLTAGE", "STRUC_TYPE", "CIRCUIT_MI",
                            "",
                            "NUMBER_CIR", "CONDUCTOR SEGMENT"]

    oh_conductor_df[""] = ""
    oh_conductor_df = oh_conductor_df.apply(lambda x: set_designation(x), axis=1)
    print(oh_conductor_df)
    oh_conductor_df_new = oh_conductor_df[conductor_df_columns]
    oh_conductor_df_new.to_excel(writer, sheet_name="Page 422-423", startrow=start_row_index, startcol=0, header=False,
                                 index=False)

    start_row_index = start_row_index + oh_conductor_df.shape[0] + 1
    ug_conductor_df[""] = ""
    ug_conductor_df = ug_conductor_df.apply(lambda x: set_designation(x), axis=1)
    ug_conductor_df_new = ug_conductor_df[conductor_df_columns]
    ug_conductor_df_new.to_excel(writer, sheet_name="Page 422-423", startrow=start_row_index, startcol=0, header=False,
                                 index=False)
    start_row_index = start_row_index + ug_conductor_df.shape[0] + 5
    oh_kw_df[""] = ""
    oh_kw_df = oh_kw_df[["", "", "", "RATEDKV", "", "", "SUM_Mi"]]
    oh_kw_df["RATEDKV"] = oh_kw_df["RATEDKV"].apply(lambda x: str(x) + "KV" if x else "")
    oh_kw_df["SUM_Mi"] = oh_kw_df["SUM_Mi"].apply(lambda x: "{:.2f}".format(x) if x else x)
    oh_kw_df.to_excel(writer, sheet_name="Page 422-423", startrow=start_row_index, startcol=0, header=False,
                      index=False)
    old_start_row_index = start_row_index

    start_row_index = start_row_index + oh_kw_df.shape[0] + 2
    ug_kw_df[""] = ""
    ug_kw_df["RATEDKV"] = ug_kw_df["RATEDKV"].apply(lambda x: str(x) + "KV" if x else "")
    ug_kw_df["SUM_Mi"] = ug_kw_df["SUM_Mi"].apply(lambda x: "{:.2f}".format(x) if x else x)
    ug_kw_df = ug_kw_df[["", "", "", "RATEDKV", "", "", "SUM_Mi"]]
    ug_kw_df.to_excel(writer, sheet_name="Page 422-423", startrow=start_row_index, startcol=0, header=False,
                      index=False)

    max_rows = start_row_index + ug_kw_df.shape[0] + 2
    formatter.format_ferc_report(writer.sheets["Page 422-423"], old_start_row_index, start_row_index,
                                 max_rows, end_date.year)
    writer.save()
    for ffname in conf.GRC_FILE_DIRS[1:]:
        dest_path = os.path.join(ffname, sheet_name)
        shutil.copy(file_path, dest_path)
    return sheet_name


def generate_excel(mongo, start_date, end_date):
    result = dict()
    result["oh_conductor_df"] = get_oh_conductor_dataset(mongo, end_date.year)
    result["ug_conductor_df"] = get_ug_conductor_dataset(mongo, end_date.year)

    result["oh_kw_df"] = get_oh_kw_dataset(mongo, end_date.year)
    result["ug_kw_df"] = get_ug_kw_dataset(mongo, end_date.year)

    file_ferc_path = generate_ferc_excel(mongo, start_date, end_date, result)
    file_ferc_intr_path = generate_ferc_intr_excel(mongo, start_date, end_date, result)
    return file_ferc_path